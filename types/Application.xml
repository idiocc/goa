<types namespace="_goa">
  <import from="http" name="IncomingMessage" desc="The first argument to the 'request' event." link="https://nodejs.org/api/http.html#http_class_http_incomingmessage" />
  <import from="http" name="ServerResponse" desc="The second parameter to the 'request' event." link="https://nodejs.org/api/http.html#http_response_socket" />
  <import from="events" name="EventEmitter" desc="All EventEmitters emit the event 'newListener' when new listeners are added and 'removeListener' when existing listeners are removed." link="https://nodejs.org/api/events.html#events_class_eventemitter" />

  <import from="@goa/cookies" ns="_goa" name="Keygrip" desc="Keygrip is a tool to encrypt sessions using a set of keys" link="https://github.com/idiocc/cookies/wiki/Keygrip" />

  <type interface extends="events.EventEmitter" name="Application" desc="The application interface.">
    <prop opt boolean name="proxy">
      Whether the server is running behind a proxy.
    </prop>
    <prop type="!Array<!_goa.Middleware>" name="middleware">
      The array with middleware used on the server.
    </prop>
    <prop type="!_goa.Context" name="context">
      The context object for each request.
    </prop>
    <prop type="!_goa.Request" name="request">
      The request object for each request.
    </prop>
    <prop type="!_goa.Response" name="response">
      The response object for each request.
    </prop>
    <prop string name="env" default="development">
      The value from the `NODE_ENV` environment variable.
    </prop>
    <prop opt type="!(_goa.Keygrip|Array<string>)" name="keys">
      The keys for signing of the cookies.
    </prop>
    <prop boolean name="silent" default="false">
      Whether to not log an error when it happens.
    </prop>
    <prop type="function()" name="listen">
      Shorthand for: `http.createServer(app.callback()).listen(...)`
    </prop>
    <prop type="function(!_goa.Middleware): !_goa.Application" name="use">
      Use the given middleware `fn`. Old-style middleware will be converted.
    </prop>
    <prop type="function(): function(!http.IncomingMessage, !http.ServerResponse)" name="callback">
      Returns the request handler callback for node's native http/http2 server composed of the installed middleware.
    </prop>
    <prop type="function(!http.IncomingMessage, !http.ServerResponse)" name="createContext">
      `＠private` Initialize a new context.
    </prop>
    <prop type="function(!Error)" name="onerror">
      `＠private` Default error handler.
    </prop>
    <prop opt number name="subdomainOffset">
       For example, if the domain is "tobi.ferrets.example.com": If `app.subdomainOffset` is not set, request.subdomains is `["ferrets", "tobi"]`. If `app.subdomainOffset` is 3, request.subdomains is `["tobi"]`.
    </prop>
  </type>
  <type type="function(!_goa.Context, !Function): *" name="Middleware" desc="The function to handle requests which can be installed with the `.use` method."/>
</types>