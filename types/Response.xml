<types namespace="_goa">
  <import from="http" name="IncomingMessage" desc="The first argument to the 'request' event." link="https://nodejs.org/api/http.html#http_class_http_incomingmessage" />
  <import from="http" name="ServerResponse" desc="The second parameter to the 'request' event." link="https://nodejs.org/api/http.html#http_response_socket" />

  <type interface name="Response" desc="The response API.">
    <prop type="_goa.Application" name="app">
      The reference to the application.
    </prop>
    <prop type="_goa.Context" name="ctx">
      The reference to the context instance.
    </prop>
    <prop type="_goa.Request" name="request">
      The reference to the request instance.
    </prop>
    <prop type="http.IncomingMessage" name="req">
      The message from the client.
    </prop>
    <prop type="http.ServerResponse" name="res">
      The response from the server.
    </prop>
    <prop type="function(string): void" name="attachment">
      Set Content-Disposition header to "attachment" with optional `filename`.
    </prop>
    <prop type="function(string, string=): void" name="redirect">
      Perform a 302 redirect to `url`. The string "back" is special-cased to provide Referrer support, when Referrer is not present `alt` or "/" is used. E.g., `this.redirect('back');`, `this.redirect('back', '/index.html');`, `this.redirect('/login');`, `this.redirect('http://google.com');`.
    </prop>
    <prop type="function(string): void" name="remove">
      Remove header `field`.
    </prop>
    <prop type="function(string): void" name="vary">
       Vary on `field`.
    </prop>
    <prop type="function(string|Object, string|Array<string>=): void" name="set">
      Set header `field` to `val`, or pass an object of header fields. Examples: `this.set('Foo', ['bar', 'baz'])`, `this.set('Accept', 'application/json')`, `this.set({ Accept: 'text/plain', 'X-API-Key': 'tobi' })`.
    </prop>
    <prop type="function(string, string|Array<string>): void" name="append">
      Append additional header `field` with value `val`. Examples: `this.append('Link', ['<http://localhost>', '<http://localhost:3000>'])`, `this.append('Set-Cookie', 'foo=bar; Path=/; HttpOnly')`, `this.append('Warning', '199 Miscellaneous warning')`.
    </prop>
    <prop type="function(): void" name="flushHeaders">
      Flush any set headers, and begin the body.
    </prop>
    <prop number name="status">
      Get/set response status code.
    </prop>
    <prop string name="message">
      Get/set response status message.
    </prop>
    <prop type="string|!Buffer|!Object|!stream.Stream" name="body">
      Get/set response body.
    </prop>
    <prop number name="length">
      Return parsed response `Content-Length` when present. Set `Content-Length` field to `n`.
    </prop>
    <prop string name="type">
      Return the response mime type void of parameters such as "charset". Set Content-Type response header with `type` through `mime.lookup()` when it does not contain a charset. Examples: `this.type = '.html';`, `this.type = 'html';`, `this.type = 'json';`, `this.type = 'application/json';`, `this.type = 'png';`.
    </prop>
    <prop type="Date" name="lastModified">
      Get the Last-Modified date in Date form, if it exists. Set the Last-Modified date using a string or a Date. `this.response.lastModified = new Date();`, ` this.response.lastModified = '2013-09-13';`.
    </prop>
    <prop string name="etag">
      Get/Set the ETag of a response. This will normalize the quotes if necessary. `this.response.etag = 'md5hashsum';`, `this.response.etag = '"md5hashsum"';`, `this.response.etag = 'W/"123456789"';`.
    </prop>
    <prop boolean name="headerSent">
      Check if a header has been written to the socket.
    </prop>
    <prop boolean name="writable">
      Checks if the request is writable. Tests for the existence of the socket as node sometimes does not set it.
    </prop>
  </type>
</types>