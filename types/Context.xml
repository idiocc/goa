<types namespace="_goa">
  <import from="http" name="IncomingMessage" />
  <import from="http" name="ServerResponse" />

  <!-- The cookies are vendored in types/vendor -->
  <import from=".." ns="_goa" name="Cookies" desc="The interface for Cookies: signed and unsigned cookies based on Keygrip." link="https://github.com/idiocc/cookies/wiki/Cookies#type-cookies" />

  <import from=".." ns="_goa" name="Application" />
  <import from=".." ns="_goa" name="Request" />
  <import from=".." ns="_goa" name="Response" />
  <import from=".." ns="_goa" name="ContextDelegatedResponse" />
  <import from=".." ns="_goa" name="ContextDelegatedRequest" />

  <type interface extends="_goa.ContextDelegatedResponse,_goa.ContextDelegatedRequest" name="Context" desc="The context object for each request.">
    <prop type="!_goa.Cookies" name="cookies">
      The cookies instance.
    </prop>
    <prop boolean name="respond">
      To bypass Koa's built-in response handling, you may explicitly set `ctx.respond = false;`
    </prop>
    <prop type="string" name="originalUrl">
      Get request original URL.
    </prop>
    <prop type="Object" name="state">
      The recommended namespace for passing information through middleware and to your frontend views.
    </prop>

    <prop type="function(): ?" name="inspect">
      util.inspect() implementation, which just returns the JSON output.
    </prop>
    <prop type="function(): ?" name="toJSON">
      Return JSON representation.
    </prop>
    <prop type="function()" name="assert">
      Similar to .throw(), adds assertion.
    </prop>
    <prop type="function()" name="throw">
      Throw an error with `msg` and optional `status` defaulting to 500. Note that these are user-level errors, and the message may be exposed to the client.
    </prop>
    <fn name="onerror">
      <arg type="!Error" name="error">The error.</arg>
      Default error handling.
    </fn>

    <prop type="!_goa.Application" name="app">
      The reference to the application.
    </prop>
    <prop type="!_goa.Request" name="request">
      The reference to the request instance.
    </prop>
    <prop type="!_goa.Response" name="response">
      The reference to the response instance.
    </prop>
    <prop type="!http.IncomingMessage" name="req">
      The message from the client.
    </prop>
    <prop type="!http.ServerResponse" name="res">
      The response from the server.
    </prop>
  </type>
</types>