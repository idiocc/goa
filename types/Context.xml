<types namespace="_goa">
  <import from="http" name="IncomingMessage" desc="The first argument to the 'request' event." link="https://nodejs.org/api/http.html#http_class_http_incomingmessage" />
  <import from="http" name="ServerResponse" desc="The second parameter to the 'request' event." link="https://nodejs.org/api/http.html#http_response_socket" />

  <type interface name="Context" desc="The context object for each request.">
    <prop type="!_goa.Cookies" name="cookies">
      The cookies instance.
    </prop>
    <prop boolean name="respond">
      To bypass Koa's built-in response handling, you may explicitly set `ctx.respond = false;`
    </prop>
    <prop type="string" name="originalUrl">
      Get request original URL.
    </prop>
    <prop type="Object" name="state">
      The recommended namespace for passing information through middleware and to your frontend views.
    </prop>

    <prop type="function(): ?" name="inspect">
      util.inspect() implementation, which just returns the JSON output.
    </prop>
    <prop type="function(): ?" name="toJSON">
      Return JSON representation.
    </prop>
    <prop type="function()" name="assert">
      Similar to .throw(), adds assertion.
    </prop>
    <prop type="function()" name="throw">
      Throw an error with `msg` and optional `status` defaulting to 500. Note that these are user-level errors, and the message may be exposed to the client.
    </prop>
    <prop type="function(!Error): void" name="onerror">
      Default error handling.
    </prop>

    <prop type="!_goa.Application" name="app">
      The reference to the application.
    </prop>
    <prop type="!_goa.Request" name="request">
      The reference to the request instance.
    </prop>
    <prop type="!_goa.Response" name="response">
      The reference to the response instance.
    </prop>
    <prop type="!http.IncomingMessage" name="req">
      The message from the client.
    </prop>
    <prop type="!http.ServerResponse" name="res">
      The response from the server.
    </prop>
  </type>
  </type>
</types>